/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaproject;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author 84338
 */
public class ImportEdit extends javax.swing.JFrame {

    /**
     * Creates new form ImportEdit
     */
    public ImportEdit() {
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                closeFrame();
            }
        });
    }

    public void closeFrame() {
        SwingUtilities.invokeLater(() -> {
            WindowEvent windowClosing = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
            Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(windowClosing);
            dispose();
        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Header = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ImportID = new javaproject.ImportTextField();
        ImportName = new javaproject.ImportTextField();
        Expiry = new javaproject.ImportTextField();
        CategoriName = new javax.swing.JComboBox<>();
        LabelCategoryName = new javax.swing.JLabel();
        BackBtn = new javax.swing.JButton();
        SaveBtn = new javax.swing.JButton();
        Suppliertextfill = new javaproject.ImportTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Header.setBackground(new java.awt.Color(102, 255, 255));
        Header.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Edit Import");

        javax.swing.GroupLayout HeaderLayout = new javax.swing.GroupLayout(Header);
        Header.setLayout(HeaderLayout);
        HeaderLayout.setHorizontalGroup(
            HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeaderLayout.createSequentialGroup()
                .addGap(149, 149, 149)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        HeaderLayout.setVerticalGroup(
            HeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HeaderLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        ImportID.setEditable(false);
        ImportID.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ImportID.setLabelText("Import ID");
        ImportID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportIDActionPerformed(evt);
            }
        });

        ImportName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ImportName.setLabelText("Import Product Name");

        Expiry.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Expiry.setLabelText("Expiry");

        CategoriName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        CategoriName.setForeground(new java.awt.Color(0, 0, 0));
        CategoriName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        CategoriName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoriNameActionPerformed(evt);
            }
        });

        LabelCategoryName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        LabelCategoryName.setText("Categories Name :");

        BackBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BackBtn.setText("Back");
        BackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnActionPerformed(evt);
            }
        });

        SaveBtn.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        SaveBtn.setText("Save");
        SaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBtnActionPerformed(evt);
            }
        });

        Suppliertextfill.setEditable(false);
        Suppliertextfill.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Suppliertextfill.setLabelText("Supplier");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Suppliertextfill, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(BackBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(SaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(ImportID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(LabelCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(CategoriName, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(Expiry, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ImportName, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)))
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ImportID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CategoriName, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Suppliertextfill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ImportName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(Expiry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BackBtn)
                    .addComponent(SaveBtn))
                .addGap(64, 64, 64))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ImportIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ImportIDActionPerformed

    private void CategoriNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoriNameActionPerformed

    }//GEN-LAST:event_CategoriNameActionPerformed

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        dispose();
        ImportProductManager phanloaiFrame = new ImportProductManager();
        if (phanloaiFrame != null && phanloaiFrame.isVisible()) {
            System.out.println("sus");
        } else if (phanloaiFrame != null) {
            phanloaiFrame.toFront();
        }


    }//GEN-LAST:event_BackBtnActionPerformed

    private void SaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBtnActionPerformed
        String importID = ImportID.getText();
        String categoryName = CategoriName.getSelectedItem().toString();
        String expiry = Expiry.getText();
        String ImportName = this.ImportName.getText();
        Connection conn = MainConnection.getConnection();
        Statement stmt = null;
        ResultSet rs = null;
        try {
            LocalDate.parse(expiry);
        } catch (DateTimeParseException e) {
            JOptionPane.showMessageDialog(null, "date is not valid !");
            return;
        }
        if (ImportName.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Import Name is required!");
            return;
        }

        try {
            stmt = conn.createStatement();
            String selectSql = "SELECT * FROM Import_Product WHERE Import_ID = '" + importID + "'";
            boolean recordExists = stmt.executeQuery(selectSql).next();
            if (recordExists) {
                // Import_ID đã tồn tại, thực hiện cập nhật dữ liệu
                String updateSql = "UPDATE Import_Product SET Categories_name = '" + categoryName + "', "
                        + "Import_Product_Name = '" + ImportName + "', "
                        + "Expiry = '" + expiry + "' "
                        + "WHERE Import_ID = '" + importID + "'";
                int rowsUpdated = stmt.executeUpdate(updateSql);
                if (rowsUpdated > 0) {
                    JOptionPane.showMessageDialog(null, "Edit data successfully");
                } else {
                    System.out.println("No data has been updated.");
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_SaveBtnActionPerformed
    public void addDataById(String importID) {
        Connection conn = MainConnection.getConnection();
        Statement stmt = null;
        ResultSet rs = null;
        try {
            stmt = conn.createStatement();
            String sql = "Select * from Import_Product where Import_ID='" + importID + "'";
            rs = stmt.executeQuery(sql);
            // Process the ResultSet and populate the DataTable
            ResultSetMetaData metaData = rs.getMetaData();
            int columnCount = metaData.getColumnCount();
            if (rs.next()) {
                for (int i = 1; i <= columnCount; i++) {
                    String columnName = metaData.getColumnName(i);
                    String columnValue = rs.getString(i);
                    // Update the corresponding text field with the column value
                    switch (columnName) {
                        case "Import_ID":
                            ImportID.setText(columnValue);
                            ImportID.setEditable(false);
                            break;
                        case "Categories_name":
                            // Set the default value of the combo box
                            CategoriName.setSelectedItem(columnValue);
                            break;
                        case "Sup_ID":
                            // Set the default value of the combo box
                            Suppliertextfill.setText(columnValue);
                            break;
                        case "Expiry":
                            String ExpiryDate = columnValue.substring(0, 10);
                            Expiry.setText(ExpiryDate);
                            Expiry.setEditable(false);
                            break;
                        case "Import_Product_Name":
                            this.ImportName.setText(columnValue);
                            break;
                        default:
                            break;
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close all Statement, ResultSet, and Connection objects
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImportEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImportEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImportEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImportEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImportEdit().setVisible(true);
            }
        });
    }

    public void populateCategoriesComboBox() {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = MainConnection.getConnection();
            stmt = conn.createStatement();
            String sql = "SELECT Category_name FROM GoodsCategories";
            rs = stmt.executeQuery(sql);
            // Clear the combo box
            CategoriName.removeAllItems();
            // Add each category to the combo box
            while (rs.next()) {
                String categoryName = rs.getString("Category_name");
                CategoriName.addItem(categoryName);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close all Statement, ResultSet, and Connection objects
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        CategoriName.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                Component component = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (isSelected) {
                    component.setFont(new Font("Arial", Font.BOLD, 14));
                } else {
                    component.setBackground(Color.WHITE); // Đặt màu nền mặc định cho các mục khác
                }
                return component;
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton BackBtn;
    private javax.swing.JComboBox<String> CategoriName;
    private javaproject.ImportTextField Expiry;
    private javax.swing.JPanel Header;
    private javaproject.ImportTextField ImportID;
    private javaproject.ImportTextField ImportName;
    private javax.swing.JLabel LabelCategoryName;
    public javax.swing.JButton SaveBtn;
    private javaproject.ImportTextField Suppliertextfill;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
